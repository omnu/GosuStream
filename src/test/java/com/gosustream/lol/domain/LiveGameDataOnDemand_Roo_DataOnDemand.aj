// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gosustream.lol.domain;

import com.gosustream.lol.domain.LiveGame;
import com.gosustream.lol.domain.LiveGameDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect LiveGameDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LiveGameDataOnDemand: @Component;
    
    private Random LiveGameDataOnDemand.rnd = new SecureRandom();
    
    private List<LiveGame> LiveGameDataOnDemand.data;
    
    public LiveGame LiveGameDataOnDemand.getNewTransientLiveGame(int index) {
        LiveGame obj = new LiveGame();
        setBroadcast(obj, index);
        setGameId(obj, index);
        setObserverKey(obj, index);
        setPriority(obj, index);
        setRegion(obj, index);
        setStartTime(obj, index);
        setStreamId(obj, index);
        return obj;
    }
    
    public void LiveGameDataOnDemand.setBroadcast(LiveGame obj, int index) {
        Boolean broadcast = false;
        obj.setBroadcast(broadcast);
    }
    
    public void LiveGameDataOnDemand.setGameId(LiveGame obj, int index) {
        String gameId = "gameId_" + index;
        obj.setGameId(gameId);
    }
    
    public void LiveGameDataOnDemand.setObserverKey(LiveGame obj, int index) {
        String observerKey = "observerKey_" + index;
        obj.setObserverKey(observerKey);
    }
    
    public void LiveGameDataOnDemand.setPriority(LiveGame obj, int index) {
        int priority = 0;
        obj.setPriority(priority);
    }
    
    public void LiveGameDataOnDemand.setRegion(LiveGame obj, int index) {
        String region = "region_" + index;
        obj.setRegion(region);
    }
    
    public void LiveGameDataOnDemand.setStartTime(LiveGame obj, int index) {
        Date startTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartTime(startTime);
    }
    
    public void LiveGameDataOnDemand.setStreamId(LiveGame obj, int index) {
        String streamId = "streamId_" + index;
        obj.setStreamId(streamId);
    }
    
    public LiveGame LiveGameDataOnDemand.getSpecificLiveGame(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LiveGame obj = data.get(index);
        Long id = obj.getId();
        return LiveGame.findLiveGame(id);
    }
    
    public LiveGame LiveGameDataOnDemand.getRandomLiveGame() {
        init();
        LiveGame obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return LiveGame.findLiveGame(id);
    }
    
    public boolean LiveGameDataOnDemand.modifyLiveGame(LiveGame obj) {
        return false;
    }
    
    public void LiveGameDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = LiveGame.findLiveGameEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LiveGame' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LiveGame>();
        for (int i = 0; i < 10; i++) {
            LiveGame obj = getNewTransientLiveGame(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
